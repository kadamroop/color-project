{"ast":null,"code":"// {\n//     paletteName: \"Material UI Colors\",\n//     id: \"material-ui-colors\",\n//     emoji: \"ðŸŽ¨\",\n//     colors: [\n//         { name: \"red\", color: \"#F44336\" },\n//         { name: \"pink\", color: \"#E91E63\" },\n//         { name: \"purple\", color: \"#9C27B0\" },\n//         { name: \"deeppurple\", color: \"#673AB7\" },\n//         { name: \"indigo\", color: \"#3F51B5\" },\n//         { name: \"blue\", color: \"#2196F3\" },\n//         { name: \"lightblue\", color: \"#03A9F4\" },\n//         { name: \"cyan\", color: \"#00BCD4\" },\n//         { name: \"teal\", color: \"#009688\" },\n//         { name: \"green\", color: \"#4CAF50\" },\n//         { name: \"lightgreen\", color: \"#8BC34A\" },\n//         { name: \"lime\", color: \"#CDDC39\" },\n//         { name: \"yellow\", color: \"#FFEB3B\" },\n//         { name: \"amber\", color: \"#FFC107\" },\n//         { name: \"orange\", color: \"#FF9800\" },\n//         { name: \"deeporange\", color: \"#FF5722\" },\n//         { name: \"brown\", color: \"#795548\" },\n//         { name: \"grey\", color: \"#9E9E9E\" },\n//         { name: \"bluegrey\", color: \"#607D8B\" }\n//     ]\n// }\nimport chroma from 'chroma-js';\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette) {\n  let newPalette = {\n    paletteName: starterPalette.paletteName,\n    id: starterPalette.id,\n    emoji: starterPalette.emoji,\n    colors: {} // colors: { 50: [{},{},{}], 100: [{},{},{}] }\n\n  };\n\n  for (let level of levels) newPalette.colors[level] = [];\n\n  for (let color of starterPalette.colors) {\n    let scale = generateScale(color.color, 10).reverse();\n\n    for (let i in scale) {\n      newPalette.colors[levels[i]].push({\n        name: `${color.name} ${levels[i]}`,\n        id: color.name.toLowerCase().replace(/ /g, \"-\"),\n        hex: scale[i],\n        rgb: chroma(scale[i]).css(),\n        rgba: chroma(scale[i]).css().replace(\"rgb\", \"rgba\").replace(\")\", \",1.0)\"),\n        luminance: chroma(scale[i]).luminance()\n      });\n    }\n  }\n\n  return newPalette;\n}\n\nfunction getRange(hexColor) {\n  const end = \"#fff\";\n  return [chroma(hexColor).darken(1.4).hex(), hexColor, end];\n}\n\nfunction generateScale(hexColor, numberOfColors) {\n  return chroma.scale(getRange(hexColor)).mode(\"lab\").colors(numberOfColors);\n}\n\nexport { generatePalette };","map":{"version":3,"sources":["/home/ruprani/Product App/color-project/src/colorHelpers.js"],"names":["chroma","levels","generatePalette","starterPalette","newPalette","paletteName","id","emoji","colors","level","color","scale","generateScale","reverse","i","push","name","toLowerCase","replace","hex","rgb","css","rgba","luminance","getRange","hexColor","end","darken","numberOfColors","mode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,MAAMC,MAAM,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,CAAf;;AAEA,SAASC,eAAT,CAAyBC,cAAzB,EAAyC;AACvC,MAAIC,UAAU,GAAG;AACfC,IAAAA,WAAW,EAAEF,cAAc,CAACE,WADb;AAEfC,IAAAA,EAAE,EAAEH,cAAc,CAACG,EAFJ;AAGfC,IAAAA,KAAK,EAAEJ,cAAc,CAACI,KAHP;AAIfC,IAAAA,MAAM,EAAE,EAJO,CAIJ;;AAJI,GAAjB;;AAOA,OAAK,IAAIC,KAAT,IAAkBR,MAAlB,EACEG,UAAU,CAACI,MAAX,CAAkBC,KAAlB,IAA2B,EAA3B;;AAEF,OAAK,IAAIC,KAAT,IAAkBP,cAAc,CAACK,MAAjC,EAAyC;AACvC,QAAIG,KAAK,GAAGC,aAAa,CAACF,KAAK,CAACA,KAAP,EAAc,EAAd,CAAb,CAA+BG,OAA/B,EAAZ;;AACA,SAAK,IAAIC,CAAT,IAAcH,KAAd,EAAqB;AACnBP,MAAAA,UAAU,CAACI,MAAX,CAAkBP,MAAM,CAACa,CAAD,CAAxB,EAA6BC,IAA7B,CAAkC;AAChCC,QAAAA,IAAI,EAAG,GAAEN,KAAK,CAACM,IAAK,IAAGf,MAAM,CAACa,CAAD,CAAI,EADD;AAEhCR,QAAAA,EAAE,EAAEI,KAAK,CAACM,IAAN,CAAWC,WAAX,GAAyBC,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAF4B;AAGhCC,QAAAA,GAAG,EAAER,KAAK,CAACG,CAAD,CAHsB;AAIhCM,QAAAA,GAAG,EAAEpB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CAAiBO,GAAjB,EAJ2B;AAKhCC,QAAAA,IAAI,EAAEtB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CAAiBO,GAAjB,GAAuBH,OAAvB,CAA+B,KAA/B,EAAsC,MAAtC,EAA8CA,OAA9C,CAAsD,GAAtD,EAA2D,OAA3D,CAL0B;AAMhCK,QAAAA,SAAS,EAAEvB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CAAiBS,SAAjB;AANqB,OAAlC;AAQD;AACF;;AAED,SAAOnB,UAAP;AACD;;AAED,SAASoB,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B,QAAMC,GAAG,GAAG,MAAZ;AACA,SAAO,CACL1B,MAAM,CAACyB,QAAD,CAAN,CAAiBE,MAAjB,CAAwB,GAAxB,EAA6BR,GAA7B,EADK,EAELM,QAFK,EAGLC,GAHK,CAAP;AAKD;;AAED,SAASd,aAAT,CAAuBa,QAAvB,EAAiCG,cAAjC,EAAiD;AAC/C,SAAO5B,MAAM,CAACW,KAAP,CAAaa,QAAQ,CAACC,QAAD,CAArB,EAAiCI,IAAjC,CAAsC,KAAtC,EAA6CrB,MAA7C,CAAoDoB,cAApD,CAAP;AACD;;AAED,SAAS1B,eAAT","sourcesContent":["// {\n//     paletteName: \"Material UI Colors\",\n//     id: \"material-ui-colors\",\n//     emoji: \"ðŸŽ¨\",\n//     colors: [\n//         { name: \"red\", color: \"#F44336\" },\n//         { name: \"pink\", color: \"#E91E63\" },\n//         { name: \"purple\", color: \"#9C27B0\" },\n//         { name: \"deeppurple\", color: \"#673AB7\" },\n//         { name: \"indigo\", color: \"#3F51B5\" },\n//         { name: \"blue\", color: \"#2196F3\" },\n//         { name: \"lightblue\", color: \"#03A9F4\" },\n//         { name: \"cyan\", color: \"#00BCD4\" },\n//         { name: \"teal\", color: \"#009688\" },\n//         { name: \"green\", color: \"#4CAF50\" },\n//         { name: \"lightgreen\", color: \"#8BC34A\" },\n//         { name: \"lime\", color: \"#CDDC39\" },\n//         { name: \"yellow\", color: \"#FFEB3B\" },\n//         { name: \"amber\", color: \"#FFC107\" },\n//         { name: \"orange\", color: \"#FF9800\" },\n//         { name: \"deeporange\", color: \"#FF5722\" },\n//         { name: \"brown\", color: \"#795548\" },\n//         { name: \"grey\", color: \"#9E9E9E\" },\n//         { name: \"bluegrey\", color: \"#607D8B\" }\n//     ]\n// }\n\nimport chroma from 'chroma-js';\n\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette) {\n  let newPalette = {\n    paletteName: starterPalette.paletteName,\n    id: starterPalette.id,\n    emoji: starterPalette.emoji,\n    colors: {} // colors: { 50: [{},{},{}], 100: [{},{},{}] }\n  };\n\n  for (let level of levels)\n    newPalette.colors[level] = [];\n\n  for (let color of starterPalette.colors) {\n    let scale = generateScale(color.color, 10).reverse();\n    for (let i in scale) {\n      newPalette.colors[levels[i]].push({\n        name: `${color.name} ${levels[i]}`,\n        id: color.name.toLowerCase().replace(/ /g, \"-\"),\n        hex: scale[i],\n        rgb: chroma(scale[i]).css(),\n        rgba: chroma(scale[i]).css().replace(\"rgb\", \"rgba\").replace(\")\", \",1.0)\"),\n        luminance: chroma(scale[i]).luminance(),\n      });\n    }\n  }\n\n  return newPalette;\n}\n\nfunction getRange(hexColor) {\n  const end = \"#fff\";\n  return [\n    chroma(hexColor).darken(1.4).hex(),\n    hexColor,\n    end\n  ];\n}\n\nfunction generateScale(hexColor, numberOfColors) {\n  return chroma.scale(getRange(hexColor)).mode(\"lab\").colors(numberOfColors);\n}\n\nexport { generatePalette };"]},"metadata":{},"sourceType":"module"}